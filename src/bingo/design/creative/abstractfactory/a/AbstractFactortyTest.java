package bingo.design.creative.abstractfactory.a;

/*
 * 工厂方法和抽象工厂的区别
 * 工厂方法：
 * 一个抽象产品类，可以派生出多个具体产品类。
 * 一个抽象工厂类，可以派生出多个具体工厂类。每个具体工厂只能创建一个具体产品类。
 * 抽象工厂：
 * 多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。
 * 一个抽象工厂类，可以派生出多个具体工厂类。
 * 每个具体工厂类，可以创建多个具体产品类的实例，也就是创造一个产品线下的多个产品。
 * 区别：
 * 工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。
 * 工厂方法模式的具体工厂类只能创建一个具体产品类实例，而抽象工厂可以创建多个。
 * 工厂方法创建"一种"产品，他的着重点在于“怎么创建”，开发的任务是围绕这种产品的构造，初始化等细节。
 * 也因为如此，类似的产品之间有很多可以复用的特征，所以会和模板方法相随。
 * 抽象工厂需要创建一系列的产品，着重点在于“创建哪些产品”，开发过程中，主要任务是划分不同的产品线，
 * 并且尽量保持每条产品线接口一致，从而可以从同一个抽象工厂继承。
 * 优点：扩充产品类的属性容易，增加产品类不易，违反开闭原则，需要修改工厂类的方法
 *
 */
public class AbstractFactortyTest
{

	public static void main(String[] args)
	{

		

	}
}
